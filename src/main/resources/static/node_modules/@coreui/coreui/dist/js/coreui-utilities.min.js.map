{"version":3,"sources":["../../js/src/utilities/get-style.js","../../js/src/utilities/hex-to-rgb.js","../../js/src/utilities/hex-to-rgba.js","../../js/src/utilities/rgb-to-hex.js"],"names":["property","element","style","document","body","match","Boolean","documentMode","cssCustomProperties","sheets","styleSheets","cssText","i","length","rules","cssRules","j","selectorText","substring","lastIndexOf","split","forEach","name","value","trim","getCssCustomProperties","window","getComputedStyle","getPropertyValue","replace","color","Error","r","g","b","parseInt","opacity","rgb","toString","slice"],"mappings":";;;;;uMA6CiB,SAACA,EAAUC,GAC1B,IAAIC,OADkD,IAA5BD,IAAAA,EAAUE,SAASC,MAI3CF,EAFmBF,EAJyBK,MAAM,WADjCC,QAAQH,SAASI,eADjB,IACkCJ,SAASI,aAnCjC,WAI7B,IAHA,IAAMC,EAAsB,GACtBC,EAASN,SAASO,YACpBC,EAAU,GACLC,EAAIH,EAAOI,OAAS,GAAQ,EAALD,EAAQA,IAAK,CAE3C,IADA,IAAME,EAAQL,EAAOG,GAAGG,SACfC,EAAIF,EAAMD,OAAS,GAAQ,EAALG,EAAQA,IACrC,GAA8B,0BAA1BF,EAAME,GAAGC,aAA0C,CACrDN,EAAUG,EAAME,GAAGL,QACnB,MAGJ,GAAIA,EACF,MAkBJ,OAdAA,EAAUA,EAAQO,UAChBP,EAAQQ,YAAY,KAAO,EAC3BR,EAAQQ,YAAY,OAGdC,MAAM,KAAKC,QAAQ,SAACrB,GAC1B,GAAIA,EAAU,CACZ,IAAMsB,EAAOtB,EAASoB,MAAM,MAAM,GAC5BG,EAAQvB,EAASoB,MAAM,MAAM,GAC/BE,GAAQC,IACVf,EAAmB,KAAMc,EAAKE,QAAYD,EAAMC,WAI/ChB,EAUuBiB,GACAzB,GAEpB0B,OAAOC,iBAAiB1B,EAAS,MAAM2B,iBAAiB5B,GAAU6B,QAAQ,MAAO,IAE3F,OAAO3B,cC7CQ,SAAC4B,GAChB,GAAqB,oBAAVA,EACT,MAAM,IAAIC,MAAM,4BAElB,IAIIC,EACAC,EACAC,EALJ,IADYJ,EAAMzB,MAAM,4BAEtB,MAAM,IAAI0B,MAASD,EAAb,6BAeR,OAPEI,EAHmB,IAAjBJ,EAAMjB,QACRmB,EAAIG,SAASL,EAAMZ,UAAU,EAAG,GAAI,IACpCe,EAAIE,SAASL,EAAMZ,UAAU,EAAG,GAAI,IAChCiB,SAASL,EAAMZ,UAAU,EAAG,GAAI,MAEpCc,EAAIG,SAASL,EAAMZ,UAAU,EAAG,GAAI,IACpCe,EAAIE,SAASL,EAAMZ,UAAU,EAAG,GAAI,IAChCiB,SAASL,EAAMZ,UAAU,EAAG,GAAI,KAGtC,QAAec,EAAf,KAAqBC,EAArB,KAA2BC,EAA3B,iBCrBgB,SAACJ,EAAOM,GACxB,QAD0C,IAAlBA,IAAAA,EAAU,KACb,oBAAVN,EACT,MAAM,IAAIC,MAAM,4BAElB,IAIIC,EACAC,EACAC,EALJ,IADYJ,EAAMzB,MAAM,4BAEtB,MAAM,IAAI0B,MAASD,EAAb,6BAeR,OAPEI,EAHmB,IAAjBJ,EAAMjB,QACRmB,EAAIG,SAASL,EAAMZ,UAAU,EAAG,GAAI,IACpCe,EAAIE,SAASL,EAAMZ,UAAU,EAAG,GAAI,IAChCiB,SAASL,EAAMZ,UAAU,EAAG,GAAI,MAEpCc,EAAIG,SAASL,EAAMZ,UAAU,EAAG,GAAI,IACpCe,EAAIE,SAASL,EAAMZ,UAAU,EAAG,GAAI,IAChCiB,SAASL,EAAMZ,UAAU,EAAG,GAAI,KAGtC,QAAec,EAAf,KAAqBC,EAArB,KAA2BC,EAA3B,KAAiCE,EAAU,IAA3C,gBCrBe,SAACN,GAChB,GAAqB,oBAAVA,EACT,MAAM,IAAIC,MAAM,4BAElB,IAAMM,EAAMP,EAAMzB,MAAM,wEACxB,IAAKgC,EACH,MAAM,IAAIN,MAASD,EAAb,6BAER,IAAME,EAAC,IAAOG,SAASE,EAAI,GAAI,IAAIC,SAAS,IACtCL,EAAC,IAAOE,SAASE,EAAI,GAAI,IAAIC,SAAS,IACtCJ,EAAC,IAAOC,SAASE,EAAI,GAAI,IAAIC,SAAS,IAE5C,MAAA,IAAWN,EAAEO,OAAO,GAAKN,EAAEM,OAAO,GAAKL,EAAEK,OAAO","sourcesContent":["/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI Utilities (v2.0.6): get-style.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\nconst getCssCustomProperties = () => {\r\n  const cssCustomProperties = {}\r\n  const sheets = document.styleSheets\r\n  let cssText = ''\r\n  for (let i = sheets.length - 1; i > -1; i--) {\r\n    const rules = sheets[i].cssRules\r\n    for (let j = rules.length - 1; j > -1; j--) {\r\n      if (rules[j].selectorText === '.ie-custom-properties') {\r\n        cssText = rules[j].cssText\r\n        break\r\n      }\r\n    }\r\n    if (cssText) {\r\n      break\r\n    }\r\n  }\r\n\r\n  cssText = cssText.substring(\r\n    cssText.lastIndexOf('{') + 1,\r\n    cssText.lastIndexOf('}')\r\n  )\r\n\r\n  cssText.split(';').forEach((property) => {\r\n    if (property) {\r\n      const name = property.split(': ')[0]\r\n      const value = property.split(': ')[1]\r\n      if (name && value) {\r\n        cssCustomProperties[`--${name.trim()}`] = value.trim()\r\n      }\r\n    }\r\n  })\r\n  return cssCustomProperties\r\n}\r\n\r\nconst minIEVersion = 10\r\nconst isIE1x = () => Boolean(document.documentMode) && document.documentMode >= minIEVersion\r\nconst isCustomProperty = (property) => property.match(/^--.*/i)\r\n\r\nconst getStyle = (property, element = document.body) => {\r\n  let style\r\n  if (isCustomProperty(property) && isIE1x()) {\r\n    const cssCustomProperties = getCssCustomProperties()\r\n    style = cssCustomProperties[property]\r\n  } else {\r\n    style = window.getComputedStyle(element, null).getPropertyValue(property).replace(/^\\s/, '')\r\n  }\r\n  return style\r\n}\r\n\r\nexport default getStyle\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI Utilities (v2.0.6): hex-to-rgb.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\n/* eslint-disable no-magic-numbers */\r\nconst hexToRgb = (color) => {\r\n  if (typeof color === 'undefined') {\r\n    throw new Error('Hex color is not defined')\r\n  }\r\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\r\n  if (!hex) {\r\n    throw new Error(`${color} is not a valid hex color`)\r\n  }\r\n  let r\r\n  let g\r\n  let b\r\n  if (color.length === 7) {\r\n    r = parseInt(color.substring(1, 3), 16)\r\n    g = parseInt(color.substring(3, 5), 16)\r\n    b = parseInt(color.substring(5, 7), 16)\r\n  } else {\r\n    r = parseInt(color.substring(1, 2), 16)\r\n    g = parseInt(color.substring(2, 3), 16)\r\n    b = parseInt(color.substring(3, 5), 16)\r\n  }\r\n\r\n  return `rgba(${r}, ${g}, ${b})`\r\n}\r\n\r\nexport default hexToRgb\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI Utilities (v2.0.6): hex-to-rgba.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\n/* eslint-disable no-magic-numbers */\r\nconst hexToRgba = (color, opacity = 100) => {\r\n  if (typeof color === 'undefined') {\r\n    throw new Error('Hex color is not defined')\r\n  }\r\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\r\n  if (!hex) {\r\n    throw new Error(`${color} is not a valid hex color`)\r\n  }\r\n  let r\r\n  let g\r\n  let b\r\n  if (color.length === 7) {\r\n    r = parseInt(color.substring(1, 3), 16)\r\n    g = parseInt(color.substring(3, 5), 16)\r\n    b = parseInt(color.substring(5, 7), 16)\r\n  } else {\r\n    r = parseInt(color.substring(1, 2), 16)\r\n    g = parseInt(color.substring(2, 3), 16)\r\n    b = parseInt(color.substring(3, 5), 16)\r\n  }\r\n\r\n  return `rgba(${r}, ${g}, ${b}, ${opacity / 100})`\r\n}\r\n\r\nexport default hexToRgba\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI (v2.0.6): rgb-to-hex.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\n/* eslint-disable no-magic-numbers */\r\nconst rgbToHex = (color) => {\r\n  if (typeof color === 'undefined') {\r\n    throw new Error('Hex color is not defined')\r\n  }\r\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)\r\n  if (!rgb) {\r\n    throw new Error(`${color} is not a valid rgb color`)\r\n  }\r\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`\r\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`\r\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`\r\n\r\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`\r\n}\r\n\r\nexport default rgbToHex\r\n"]}